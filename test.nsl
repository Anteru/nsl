struct TransformationMatrices
{
	uint applyOffset[3];
	matrix4x4 matrices[3];
	float4 offset[3];
}

struct TransformInfo
{
	uint pointsToTransform;
	TransformationMatrices transforms[32];
}

float4 inputPositions[32];
float4 outputPositions[32];

export function AddTwoIntegers(int a, int b) -> int
{
	return a + b;
}

int global_a;

export function AddToGlobal(int a) -> int
{
	return a + global_a;
}

int global_array[2];

export function AddToGlobalArray (int a, int index) -> int
{
	return a + global_array[index];
}

export function branchIfElseIfElse(int a) -> int {
        if(a < 5) { return 0; } else if (a > 5) { return 1; } else { return -1; }
}

function CreateFloat4 (float2 a, float b, float c) -> float4
{
	return float4(a, b, c);
}

function TransformPoint(float4 p, TransformationMatrices m) -> float4
{
	for (int i = 0; i < 3; ++i) {
		p = m.matrices[i] * p;
	}

	for (uint i = 0; i < 3; ++i) {
		if (m.applyOffset[i]) {
			p += m.offset[i];
		}
	}

	return p;
}

function Transform(TransformInfo info) -> void
{
	for (int i = 0; i < info.pointsToTransform; ++i) {
		outputPositions[i] = TransformPoint (inputPositions[i], info.transforms[i]);
	}
}
